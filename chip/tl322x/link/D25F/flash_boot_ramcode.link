/********************************************************************************************************
 * @file    flash_boot_ramcode.link
 *
 * @brief   This is the link file for tl322x
 *
 * @author  Driver Group
 * @date    2024
 *
 * @par     Copyright (c) 2024, Telink Semiconductor (Shanghai) Co., Ltd. ("TELINK")
 *
 *          Licensed under the Apache License, Version 2.0 (the "License");
 *          you may not use this file except in compliance with the License.
 *          You may obtain a copy of the License at
 *
 *              http://www.apache.org/licenses/LICENSE-2.0
 *
 *          Unless required by applicable law or agreed to in writing, software
 *          distributed under the License is distributed on an "AS IS" BASIS,
 *          WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *          See the License for the specific language governing permissions and
 *          limitations under the License.
 *
 *******************************************************************************************************/
/*
 * The alignment of VMA and LMA is as follows: 
 * VMA: 
 * 1. Linker auto-alignment
 * .data:
 * 2. specified by user
 * There are the following two ways:
 * . = ALIGN(n);  
 * .data  : 
 *  If the address(. = align(n)) satisfies the alignment of the data segment, the VMA address of the data segment is . = align(n).  
 *  If the address(. = align(n)) does not satisfy the alignment of the data segment, the VMA address of the data segment is then aligned by the linker in accordance with the alignment on this basis . 
 *  Note that: if this is the case, n is the size of the segment's alignment rule, otherwise . =align(n) does not work.
 * . = ALIGN(n);  
 * .data .  :  
 * The way that . = ALIGN(n) specifies how much is how much.
 *
 * LMA:
 * 
 * 1. Linker auto-alignment
 * AT(ALIGN(LOADADDR (.data) + SIZEOF (.data), ALIGNOF(.data)) 
 * 2. user-specified
 * AT(ALIGN(LOADADDR (.data) + SIZEOF (.data), n) 
 *   
 * If the alignment rules of LMA and VMA are the same, the following combination is generally used:
 *.data : AT(ALIGN(LOADADDR (.data) + SIZEOF (.data), ALIGNOF(.data)) 
 * {
 * .....
 * }
 * Be careful of the following points when moving data or code from LMA to VMA: 
 * - When moving only one data segment at a time, simply make sure that the first addresses of the LMA and VMA for that data segment are aligned in the same way.
 * - When moving multiple data segments at the same time, the following operations must be performed: 
 * 1. The first addresses of the LMA and VMA are aligned according to the maximum alignment of all data segments;
 * 2. LMA and VMA are aligned in the same way in each data segment;
 * Refer to the examples: 
 * Example 1
 * . = ALIGN(MAX(ALIGNOF(.rf_certification_cfg), ALIGNOF(.data)). 
 * .rf_certification_cfg . : AT(ALIGN(LOADDR(.ram_code) + SIZEOF(.ram_code)), MAX(ALIGNOF(.rf_certification_cfg), ALIGNOF(.data )))))). * .data : AT(ALIGN(LOADDR(.ram_code) + SIZEOF(.data)). 
 * .data : AT(ALIGN(LOADADDR (.rf_certification_cfg) + SIZEOF (.rf_certification_cfg), ALIGNOF(.data)))
 */
  
ENTRY(_RESET_ENTRY)
SECTIONS
{
    NDS_SAG_LMA_FLASH = 0x20000000 ;
    . = 0x20000000; 
    PROVIDE (BIN_BEGIN = .);
    .vectors        : { KEEP(*(.vectors )) }
    . = 0x00000000;
    .retention_reset    : AT( ALIGN(LOADADDR (.vectors) + SIZEOF (.vectors),ALIGNOF(.retention_reset))) 
        { KEEP(*(.retention_reset )) }
    PROVIDE (_RETENTION_RESET_VMA_START = ADDR(.retention_reset));
    PROVIDE (_RETENTION_RESET_LMA_START = LOADADDR(.retention_reset));
    PROVIDE (_RETENTION_RESET_VMA_END = .); 

    .retention_data : AT( ALIGN(LOADADDR (.retention_reset) + SIZEOF (.retention_reset),ALIGNOF(.retention_data))) 
        { KEEP(*(.retention_data )) }
    PROVIDE (_RETENTION_DATA_VMA_START = ADDR(.retention_data));
    PROVIDE (_RETENTION_DATA_LMA_START = LOADADDR(.retention_data));
    PROVIDE (_RETENTION_DATA_VMA_END = .); 

    .ram_code   : AT( ALIGN(LOADADDR (.retention_data) + SIZEOF (.retention_data),ALIGNOF(.ram_code))) 
        { 
          *(.ram_code)
          *(.text .stub .text.* .gnu.linkonce.t.* ) KEEP(*(.text.*personality* )) *(.gnu.warning )
          KEEP(*(.eh_frame ))
          *(.eh_frame_hdr ) 
          KEEP(*(.exec.itable))       
          
         }
    PROVIDE (_RAMCODE_VMA_END = .);
    PROVIDE (_RAMCODE_VMA_START = ADDR(.ram_code));
    PROVIDE (_RAMCODE_LMA_START = LOADADDR(.ram_code));
    PROVIDE (_RAMCODE_SIZE = SIZEOF (.ram_code));
     
    PROVIDE (_ILM_USE_START = ADDR(.retention_reset));
    PROVIDE (_ILM_USE_END = .);
    PROVIDE (_ILM_USE_SIZE = (_ILM_USE_END) -(_ILM_USE_START));

    . = 0x00080000;
    PROVIDE( __global_pointer$ = . + (4K / 2) );
    .rf_certification_cfg . : AT(ALIGN(LOADADDR(.ram_code) + SIZEOF(.ram_code), MAX(ALIGNOF(.rf_certification_cfg), ALIGNOF(.data))))
        { KEEP(*(.rf_certification_cfg)) }
    PROVIDE (_RF_CERTIFICATION_CFG_ADDR_OFFSET = LOADADDR(.rf_certification_cfg) - BIN_BEGIN);
   
    .data   : AT(ALIGN(LOADADDR (.rf_certification_cfg) + SIZEOF (.rf_certification_cfg),ALIGNOF(.data)))
        { *(.data .data.* .gnu.linkonce.d.* ) KEEP(*(.gnu.linkonce.d.*personality* )) SORT(CONSTRUCTORS)
          *(.rodata .rodata.* .gnu.linkonce.r.* )
          *(.srodata.cst16 ) *(.srodata.cst8 ) *(.srodata.cst4 ) *(.srodata.cst2 ) *(.srodata .srodata.* ) *(.sdata .sdata.* .gnu.linkonce.s.* ) *(.sdata2 .sdata2.* .gnu.linkonce.s.* ) 
        }
    PROVIDE (_DATA_VMA_END = .);
    PROVIDE (_DATA_VMA_START = ADDR(.data));
    PROVIDE (_DATA_LMA_START = LOADADDR(.data));
    
    . = ALIGN(8);
    PROVIDE (_BSS_VMA_START = .);
    .sbss   (NOLOAD)    : { *(.dynsbss ) *(.sbss .sbss.* .gnu.linkonce.sb.* ) *(.scommon .scommon.* ) }
    .bss    (NOLOAD)    : { *(.dynbss ) *(.bss .bss.* .gnu.linkonce.b.* ) *(COMMON ) . = ALIGN(8); }
    /* When using the S file _FILL_STK function (which clears all the values in the stack space to 0x55), 
     * if _BSS_VMA_END does not have four-byte alignment, there may be an out-of-bounds access beyond _STACK_TOP,
     * resulting in a store access fault.
     */
    PROVIDE (_BSS_VMA_END = ((. + 3) / 4)*4);
    
    .sdk_version    : AT(LOADADDR (.data) + SIZEOF (.data))
        { KEEP(*(.sdk_version )) }

    PROVIDE (BIN_SIZE = LOADADDR(.sdk_version) + SIZEOF(.sdk_version) - BIN_BEGIN);
        
    . = ALIGN(8);
    /* end is the starting address of the heap, the heap grows upward */
    _end = .;
    PROVIDE (end = .);          
    PROVIDE (_STACK_TOP = 0x00080000 + 0x8000 * __D25F_DRAM_SIZE);
    PROVIDE (FLASH_SIZE = 0x0100000);
    PROVIDE (_DLM_USE_SIZE = _BSS_VMA_END);
}

ASSERT((BIN_SIZE)<= FLASH_SIZE, "BIN FILE OVERFLOW");
ASSERT((_ILM_USE_SIZE)<= 0x8000 * __D25F_IRAM_SIZE, "IRAM OVERFLOW");
ASSERT((_DLM_USE_SIZE)<= (_STACK_TOP-600), "DRAM OVERFLOW");/*Error: RAM size maybe overflow.(This is determined based on the stack size of 600 bytes. If this does not match the actual usage, the corresponding judgment criteria in the link file can be modified*/
