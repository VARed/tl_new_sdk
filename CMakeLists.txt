cmake_minimum_required(VERSION 3.19)

if(NOT DEFINED PROJECT_NAME)
    file(GLOB_RECURSE JSON_FILES "${CMAKE_SOURCE_DIR}/cmake_configs/*_cmake.json")
    list(LENGTH JSON_FILES FILE_COUNT)
    message(STATUS "Have find ${FILE_COUNT}  *_cmake.json filesã€‚")
    foreach(FILE_PATH ${JSON_FILES})
        get_filename_component(FILE_NAME "${FILE_PATH}" NAME_WE)
        string(REGEX REPLACE "_cmake$" "" CLEAN_NAME "${FILE_NAME}")
        message(STATUS "* ${CLEAN_NAME}")
    endforeach()
    message(FATAL_ERROR "must declare PROJECT_NAME, fs: -DPROJECT_NAME=${CLEAN_NAME}")
endif()

if(NOT DEFINED TOOLCHAIN_NAME)
    message(STATUS "Have no find TOOLCHAIN_NAME")
endif()

set(CONFIG_FILE "${CMAKE_SOURCE_DIR}/cmake_configs/${PROJECT_NAME}_cmake.json")
if(NOT EXISTS "${CONFIG_FILE}")
    message(FATAL_ERROR "configuration file ${CONFIG_FILE} is not exist!")
endif()

file(READ "${CONFIG_FILE}" CONFIG_JSON)
string(JSON NAME GET ${CONFIG_JSON} name)
message(STATUS "Project: ${NAME}")

if(WIN32)
    set(SUFFIX ".exe")
else()
    set(SUFFIX "")
endif()


if (TOOLCHAIN_NAME STREQUAL "TC32-GCC Toolchain")
    # set(TOOLCHAIN_PATH /home/user/.Telink_Tools/tc32_130_Linux/tc32)
    set(CMAKE_C_COMPILER ${TOOLCHAIN_PATH}/bin/tc32-elf-gcc${SUFFIX})
    set(CMAKE_ASM_COMPILER ${TOOLCHAIN_PATH}/bin/tc32-elf-gcc${SUFFIX})
    project(${NAME} LANGUAGES ASM C)
    set(CMAKE_LINKER ${TOOLCHAIN_PATH}/bin/tc32-elf-ld${SUFFIX})
    set(CMAKE_OBJDUMP ${TOOLCHAIN_PATH}/bin/tc32-elf-objdump${SUFFIX})
    set(CMAKE_OBJCOPY ${TOOLCHAIN_PATH}/bin/tc32-elf-objcopy${SUFFIX})
    set(CMAKE_PRINTSIZE ${TOOLCHAIN_PATH}/bin/tc32-elf-size${SUFFIX})
    set(CMAKE_C_LINK_EXECUTABLE "<CMAKE_LINKER> <FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>")
else()
    # set(TOOLCHAIN_PATH /home/user/.Telink_Tools/V53xf_Linux_X64/nds32le-elf-mculib-v5f)
    set(CMAKE_C_COMPILER ${TOOLCHAIN_PATH}/bin/riscv32-elf-gcc${SUFFIX})
    set(CMAKE_CXX_COMPILER ${TOOLCHAIN_PATH}/bin/riscv32-elf-g++${SUFFIX})
    set(CMAKE_ASM_COMPILER ${TOOLCHAIN_PATH}/bin/riscv32-elf-gcc${SUFFIX})
    set(CMAKE_OBJDUMP ${TOOLCHAIN_PATH}/bin/riscv32-elf-objdump${SUFFIX})
    set(CMAKE_OBJCOPY ${TOOLCHAIN_PATH}/bin/riscv32-elf-objcopy${SUFFIX})
    set(CMAKE_PRINTSIZE ${TOOLCHAIN_PATH}/bin/riscv32-elf-size${SUFFIX})
    project(${NAME} LANGUAGES ASM C)
    set(CMAKE_C_LINK_EXECUTABLE "<CMAKE_C_COMPILER> <FLAGS> <CMAKE_C_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>")
endif()


set(CMAKE_VERBOSE_MAKEFILE ON)
set(CMAKE_SKIP_RPATH True)
set(CMAKE_LINK_LIBRARY_SUFFIX "")
set(CMAKE_C_STANDARD_LIBRARIES "")
set(CMAKE_CXX_STANDARD_LIBRARIES "")
set(CMAKE_C_FLAGS_DEBUG "")
set(CMAKE_C_FLAGS_RELEASE "")
set(CMAKE_DEPFILE_FLAGS_C "-MMD -MP -MT <DEP_TARGET> -MF <DEP_FILE>")

function(json_to_list JSON_ARRAY_STRING OUTPUT_LIST)
    string(JSON ARRAY_TYPE TYPE "${JSON_ARRAY_STRING}")
    if(NOT ARRAY_TYPE STREQUAL "ARRAY")
        message(FATAL_ERROR "Error: The input is not a valid JSON array, is ${ARRAY_TYPE}.")
    endif()

    string(JSON ARRAY_LENGTH LENGTH "${JSON_ARRAY_STRING}")
    if(ARRAY_LENGTH GREATER 0)
        math(EXPR LAST_INDEX "${ARRAY_LENGTH} - 1")
        foreach(INDEX RANGE 0 ${LAST_INDEX})
            string(JSON ELEMENT GET "${JSON_ARRAY_STRING}" ${INDEX})
            string(CONFIGURE "${ELEMENT}" ELEMENT)
            string(REPLACE " " ";" ELEMENT "${ELEMENT}")
            separate_arguments(ELEMENT UNIX_COMMAND "${ELEMENT}")
            foreach(ELEMENT_ITEM ${ELEMENT})
                list(APPEND LOCAL_OUTPUT_LIST ${ELEMENT_ITEM})
            endforeach()
        endforeach()
    endif()

    if(DEFINED ARGV2)
        string(JOIN " " LOCAL_OUTPUT_STRING ${LOCAL_OUTPUT_LIST})
        set(${ARGV2} "${LOCAL_OUTPUT_STRING}" PARENT_SCOPE)
    endif()

    set(${OUTPUT_LIST} "${LOCAL_OUTPUT_LIST}" PARENT_SCOPE)

endfunction()

function(include_sources RESULT_VAR RELATIVE_PATHS)
    set(RESULT "")

    foreach(PATH IN LISTS ${RELATIVE_PATHS})
        if("${PATH}" STREQUAL "")
            message(STATUS "Skipping empty path.")
            continue()
        endif()
        get_filename_component(FULL_PATH "${CMAKE_CURRENT_SOURCE_DIR}/${PATH}" ABSOLUTE)
        if(IS_DIRECTORY "${FULL_PATH}")
            file(GLOB_RECURSE SOURCES RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "${FULL_PATH}/*.c" "${FULL_PATH}/*.S")
        elseif(EXISTS "${FULL_PATH}")
            file(RELATIVE_PATH REL_PATH "${CMAKE_CURRENT_SOURCE_DIR}" "${FULL_PATH}")
            set(SOURCES "${REL_PATH}")
        else()
            message(WARNING "Path does not exist: ${FULL_PATH}")
            continue()
        endif()

        list(APPEND RESULT ${SOURCES})
    endforeach()

    if(RESULT)
        list(REMOVE_DUPLICATES RESULT)
        list(SORT RESULT)
    endif()
    set(${RESULT_VAR} ${RESULT} PARENT_SCOPE)
endfunction()

function(include_source RESULT_VAR RELATIVE_PATH)
    set(${RESULT_VAR} ${${RESULT_VAR}} ${RELATIVE_PATH} PARENT_SCOPE)
endfunction()



set(PROJECT_CONFIG ${CONFIG_JSON})
string(JSON TARGETS_LENGTH LENGTH ${PROJECT_CONFIG} targets)
math(EXPR TARGETS_LAST_INDEX "${TARGETS_LENGTH} - 1")
message(STATUS "Target NUM: ${TARGETS_LENGTH}")

set(SUB_MODULE_PATH_LIST "")
foreach(INDEX RANGE 0 ${TARGETS_LAST_INDEX})
    string(JSON TARGET_JSON GET ${PROJECT_CONFIG} targets ${INDEX})
    string(JSON TARGET_NAME GET ${TARGET_JSON} name)
    string(JSON TARGET_TOOLCHAIN_NAME GET ${TARGET_JSON} toolchainVersionName)

    if (NOT TARGET_TOOLCHAIN_NAME STREQUAL TOOLCHAIN_NAME)
        continue()
    endif()
    message(STATUS "Target: ${TARGET_NAME}")

    set(Target_SubModules "")

    string(JSON SUB_DIRECTORIES GET ${TARGET_JSON} sub_directories)
    if(SUB_DIRECTORIES)
        string(JSON SUB_DIRECTORIES_LEN LENGTH ${TARGET_JSON} sub_directories)
        math(EXPR SUB_TARGETS_LAST_INDEX "${SUB_DIRECTORIES_LEN} - 1")

        if(SUB_TARGETS_LAST_INDEX GREATER_EQUAL 0)
            foreach(SUBINDEX RANGE 0 ${SUB_TARGETS_LAST_INDEX})
                string(JSON SUBTARGET_JSON GET ${TARGET_JSON} sub_directories ${SUBINDEX})
                
                set(SOURCE_DIR_LIST_CONCAT "")
                string(JSON SUB_PATH GET ${SUBTARGET_JSON} path)
                string(JSON SUB_NAME GET ${SUBTARGET_JSON} name)
                string(JSON SOURCE_DIR GET ${SUBTARGET_JSON} directories)
                if(SOURCE_DIR)
                    json_to_list(${SOURCE_DIR} SOURCE_DIR_LIST)
                    foreach(REL_PATH ${SOURCE_DIR_LIST})
                        set(ABS_PATH "${SUB_PATH}/${REL_PATH}")
                        list(APPEND SOURCE_DIR_LIST_CONCAT "${ABS_PATH}")
                    endforeach()
                endif()

                # message(STATUS "-- SOURCE_DIR_LIST_CONCAT: ${SOURCE_DIR_LIST_CONCAT}")
                include_sources(SUB_SOURCES SOURCE_DIR_LIST_CONCAT)
                if(NOT SUB_SOURCES)
                    message(STATUS "No source files found for sub-target ${SUB_TARGET}, skipping...")
                    continue()
                endif()

                set(SUB_TARGET ${TARGET_NAME}_${SUB_NAME})
                add_library(${SUB_TARGET} OBJECT ${SUB_SOURCES})
                list(APPEND Target_SubModules ${SUB_TARGET})

                string(JSON ASM_OPTS GET ${SUBTARGET_JSON} asm_compile_options)
                if(ASM_OPTS)
                    json_to_list(${ASM_OPTS} ASM_OPTS_LIST)
                    target_compile_options(${SUB_TARGET} PRIVATE $<$<COMPILE_LANGUAGE:ASM>: ${ASM_OPTS_LIST}>)
                endif()

                string(JSON C_OPTS GET ${SUBTARGET_JSON} c_compile_options)
                if(C_OPTS) 
                    json_to_list(${C_OPTS} C_OPTS_LIST)
                    target_compile_options(${SUB_TARGET} PRIVATE $<$<COMPILE_LANGUAGE:C>: ${C_OPTS_LIST}>)
                endif()
            endforeach()
        endif()
    endif()

    string(JSON SOURCE_DIR GET ${TARGET_JSON} directories)
    if(SOURCE_DIR)
        json_to_list(${SOURCE_DIR} SOURCE_DIR_LIST)
        if(NOT SOURCE_DIR_LIST)
            message(STATUS "No source files found for target ${TARGET_NAME}, skipping...")
            continue()
        endif()
        include_sources(SOURCES SOURCE_DIR_LIST)
    else()
        message(STATUS "No SOURCE_DIR found for target ${TARGET_NAME} json, skipping...")
        continue()
    endif()
    add_executable(${TARGET_NAME} ${SOURCES})
    set_target_properties(${TARGET_NAME} PROPERTIES SUFFIX ".elf")
    # set_target_properties(${TARGET_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY  ${TARGET_NAME})

    string(JSON ASM_OPTS GET ${TARGET_JSON} asm_compile_options)
    if(ASM_OPTS)  
        json_to_list(${ASM_OPTS} ASM_OPTS_LIST ASM_OPTS_STR)
        target_compile_options(${TARGET_NAME} PRIVATE $<$<COMPILE_LANGUAGE:ASM>: ${ASM_OPTS_LIST}>)
    endif()

    string(JSON C_OPTS GET ${TARGET_JSON} c_compile_options)
    if(C_OPTS)  
        json_to_list(${C_OPTS} C_OPTS_LIST C_OPTS_STR)
        target_compile_options(${TARGET_NAME} PRIVATE $<$<COMPILE_LANGUAGE:C>: ${C_OPTS_LIST}>)
    endif()

    string(JSON LINKER_SCRIPT GET ${TARGET_JSON} linker_script)
    string(JSON LINKER_OPTS GET ${TARGET_JSON} linker_options)
    string(JSON LINKER_DIRS GET ${TARGET_JSON} linker_directories)
    string(JSON LINKER_LIBS GET ${TARGET_JSON} linker_libraries)
    string(JSON PRE_BUILDS GET ${TARGET_JSON} pre_build)

    if(LINKER_OPTS) 
        json_to_list(${LINKER_OPTS} LINKER_OPTS_LIST)
    endif()

    if(LINKER_DIRS) 
        json_to_list(${LINKER_DIRS} LINKER_DIRS_LIST)
    endif()

    if(LINKER_LIBS) 
        json_to_list(${LINKER_LIBS} LINKER_LIBS_LIST)
    endif()

    set_target_properties(${TARGET_NAME} PROPERTIES LINK_OPTIONS "" )
    target_link_options(${TARGET_NAME} PRIVATE ${LINKER_OPTS_LIST})
    target_link_directories(${TARGET_NAME} PRIVATE ${LINKER_DIRS_LIST})
    target_link_libraries(${TARGET_NAME} PRIVATE ${Target_SubModules} ${LINKER_LIBS_LIST})



    string(JSON OBJ_COPY GET ${TARGET_JSON} obj_copy)
    if(OBJ_COPY)  
        json_to_list(${OBJ_COPY} OBJ_COPY_LIST)
        add_custom_command(TARGET ${TARGET_NAME} POST_BUILD COMMAND ${CMAKE_OBJCOPY} ${OBJ_COPY_LIST} ${TARGET_NAME}.elf ${TARGET_NAME}.bin)
    endif()

    string(JSON OBJ_DUMP GET ${TARGET_JSON} obj_dump)
    if(OBJ_DUMP)  
        json_to_list(${OBJ_DUMP} OBJ_DUMP_LIST)
        add_custom_command(TARGET ${TARGET_NAME} POST_BUILD COMMAND ${CMAKE_OBJDUMP} ${OBJ_DUMP_LIST} ${TARGET_NAME}.elf > ${TARGET_NAME}.lst)
    endif()

    string(JSON PRINT_SIZE GET ${TARGET_JSON} print_size)
    if(PRINT_SIZE)  
        json_to_list(${PRINT_SIZE} PRINT_SIZE_LIST)
        add_custom_command(TARGET ${TARGET_NAME} POST_BUILD COMMAND ${CMAKE_PRINTSIZE} ${PRINT_SIZE_LIST} ${TARGET_NAME}.elf)
    endif()

    string(JSON PRE_BUILD GET ${TARGET_JSON} pre_build)
    if(PRE_BUILD)  
        json_to_list(${PRE_BUILD} PRE_BUILD_LIST)
        if (PRE_BUILD_LIST)
            list(GET PRE_BUILD_LIST 0 SCRIPT_PATH)
            if(NOT WIN32)
                file(CHMOD "${SCRIPT_PATH}" PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE)
            endif()
            add_custom_target(${TARGET_NAME}_prebuild
                COMMAND ${PRE_BUILD_LIST}
                WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                COMMENT "Executing ${TARGET_NAME} prebuild steps"
            )
            add_dependencies(${TARGET_NAME} ${TARGET_NAME}_prebuild)
        endif()
    endif()

    string(JSON POST_BUILD GET ${TARGET_JSON} post_build)
    if(POST_BUILD)  
        json_to_list(${POST_BUILD} POST_BUILD_LIST)
        if (POST_BUILD_LIST)
            list(GET POST_BUILD_LIST 0 SCRIPT_PATH)
            if(NOT WIN32)
                file(CHMOD "${SCRIPT_PATH}" PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE)
            endif()
            add_custom_command(TARGET ${TARGET_NAME} POST_BUILD COMMAND ${POST_BUILD_LIST})
        endif()
    endif()
    
endforeach()
